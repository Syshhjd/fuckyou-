const config = require('../config');
const { cmd } = require('../command');

// Parse time duration from arguments
function parseDuration(value, unit) {
    const multipliers = {
        second: 1000,
        seconds: 1000,
        minute: 60000,
        minutes: 60000,
        hour: 3600000,
        hours: 3600000,
        day: 86400000,
        days: 86400000
    };
    if (isNaN(value)) return null;
    return multipliers[unit.toLowerCase()] ? parseInt(value) * multipliers[unit.toLowerCase()] : null;
}

cmd({
    pattern: "opentime",
    react: "üîñ",
    desc: "Temporarily open group for a specific time",
    category: 'web',
    use: ".opentime 10 minutes",
    filename: __filename
}, async (conn, mek, m, { from, args, isGroup, isAdmins, reply }) => {
    try {
        if (!isGroup) return reply("·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥è…¥ ü è ·¥°·¥è Ä·¥ãs …™…¥ …¢ Ä·¥è·¥ú·¥òs.");
        if (!isAdmins) return reply("·¥è…¥ ü è …¢ Ä·¥è·¥ú·¥ò ·¥Ä·¥Ö·¥ç…™…¥s ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.");

        const timer = parseDuration(args[0], args[1]);
        if (!timer) return reply("*·¥Ñ ú·¥è·¥ès·¥á ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥ú…¥…™·¥õ:*\nseconds, ·¥ç…™…¥·¥ú·¥õ·¥ás,  ú·¥è·¥ú Äs, ·¥Ö·¥Ä ès\n\n*·¥áx·¥Ä·¥ç·¥ò ü·¥á:*\n10 ·¥ç…™…¥·¥ú·¥õ·¥ás");

        reply(`*…¢ Ä·¥è·¥ú·¥ò ·¥°…™ ü ü  ô·¥á ·¥è·¥ò·¥á…¥·¥á·¥Ö “ì·¥è Ä ${args[0]} ${args[1]}.*`);
        await conn.groupSettingUpdate(from, 'not_announcement');

        setTimeout(async () => {
            await conn.groupSettingUpdate(from, 'announcement');
            await conn.sendMessage(from, { text: `*‚è±Ô∏è TIME'S UP*\nGroup …™s …¥·¥è·¥° ·¥Ñ ü·¥ès·¥á·¥Ö. ·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥s ·¥Ñ·¥Ä…¥ s·¥á…¥·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás. üîê` });
        }, timer);

        await conn.sendMessage(from, { react: { text: `‚úÖ`, key: mek.key } });
    } catch (e) {
        reply("*An error occurred while opening the group.*");
        console.error(e);
    }
});

cmd({
    pattern: "closetime",
    react: "üîñ",
    desc: "Temporarily close group for a specific time",
    category: "group",
    use: ".closetime 10 minutes",
    filename: __filename
}, async (conn, mek, m, { from, args, isGroup, isAdmins, reply }) => {
    try {
        if (!isGroup) return reply("·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥è…¥ ü è ·¥°·¥è Ä·¥ãs …™…¥ …¢ Ä·¥è·¥ú·¥òs.");
        if (!isAdmins) return reply("·¥è…¥ ü è …¢ Ä·¥è·¥ú·¥ò ·¥Ä·¥Ö·¥ç…™…¥s ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.");

        const timer = parseDuration(args[0], args[1]);
        if (!timer) return reply("*·¥Ñ ú·¥è·¥ès·¥á ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥ú…¥…™·¥õ:*\nseconds, ·¥ç…™…¥·¥ú·¥õ·¥ás,  ú·¥è·¥ú Äs, ·¥Ö·¥Ä ès\n\n*·¥áx·¥Ä·¥ç·¥ò ü·¥á:*\n10 ·¥ç…™…¥·¥ú·¥õ·¥ás");

        reply(`*…¢ Ä·¥è·¥ú·¥ò ·¥°…™ ü ü  ô·¥á ·¥Ñ ü·¥ès·¥á·¥Ö “ì·¥è Ä ${args[0]} ${args[1]}.*`);
        await conn.groupSettingUpdate(from, 'announcement');

        setTimeout(async () => {
            await conn.groupSettingUpdate(from, 'not_announcement');
            await conn.sendMessage(from, { text: `*‚è±Ô∏è ·¥õ…™·¥ç·¥á's ·¥ú·¥ò*\nGroup …™s …¥·¥è·¥° ·¥è·¥ò·¥á…¥. ·¥Ä ü ü ·¥ç·¥á·¥ç ô·¥á Äs ·¥Ñ·¥Ä…¥ s·¥á…¥·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás. üîì` });
        }, timer);

        await conn.sendMessage(from, { react: { text: `‚úÖ`, key: mek.key } });
    } catch (e) {
        reply("*An error occurred while closing the group.*");
        console.error(e);
    }
});