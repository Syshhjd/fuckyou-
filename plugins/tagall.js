const config = require('../config')
const { cmd, commands } = require('../command')
const { getBuffer, getGroupAdmins, getRandom, h2k, isUrl, Json, runtime, sleep, fetchJson} = require('../lib/functions')

cmd({
    pattern: "tagall",
    react: "üîä",
    alias: ["gc_tagall"],
    desc: "To Tag all Members",
    category: 'moderation',
    use: '.tagall [message]',
    filename: __filename
},
async (conn, mek, m, { from, participants, reply, isGroup, senderNumber, groupAdmins, prefix, command, args, body }) => {
    try {
        if (!isGroup) return reply("‚ùå ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è  ô·¥á ·¥ús·¥á·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥òs.");
        
        const botOwner = conn.user.id.split(":")[0]; // Extract bot owner's number
        const senderJid = senderNumber + "@s.whatsapp.net";

        if (!groupAdmins.includes(senderJid) && senderNumber !== botOwner) {
            return reply("‚ùå ·¥è…¥ ü è …¢ Ä·¥è·¥ú·¥ò ·¥Ä·¥Ö·¥ç…™…¥s ·¥è Ä ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.");
        }

        // Ensure group metadata is fetched properly
        let groupInfo = await conn.groupMetadata(from).catch(() => null);
        if (!groupInfo) return reply("‚ùå “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è “ì·¥á·¥õ·¥Ñ ú …¢ Ä·¥è·¥ú·¥ò …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥.");

        let groupName = groupInfo.subject || "Unknown Group";
        let totalMembers = participants ? participants.length : 0;
        if (totalMembers === 0) return reply("‚ùå …¥·¥è ·¥ç·¥á·¥ç ô·¥á Äs “ì·¥è·¥ú…¥·¥Ö …™…¥ ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò.");

        let emojis = ['üé≠', 'üé≠', 'üé≠', 'üé≠', 'üé≠', 'ü•∑', 'üñ§', 'üé≠', 'üé≠', 'üé≠', 'ü•∑', 'ü•∑', 'üé≠', 'üé≠', 'üôÇ‚Äç‚ÜïÔ∏è', 'üí∏', 'üé≠', 'üé≠', 'üé≠', 'ü•∑', 'ü•∑', 'ü•∑', 'ü•∑', 'ü•∑', 'ü•∑', 'ü•∑', 'ü•∑', 'ü•∑'];
        let randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];

        // Proper message extraction
        let message = body.slice(body.indexOf(command) + command.length).trim();
        if (!message) message = "ùêÄùêìùêìùêÑùêçùêìùêàùêéùêç ùêÑùêïùêÑùêëùêòùêéùêçùêÑ ùêåùêÄùêÖùêàùêÄ-ùêåùêÉ ùêìùêÄùêÜùêÜùêÑùêÉ ùêòùêéùêî ùêáùêÑùêëùêÑ!"; // Default message

        let teks = `‚ñ¢ …¢ Ä·¥è·¥ú·¥ò : *${groupName}*\n‚ñ¢ ·¥ç·¥á·¥ç ô·¥á Äs : *${totalMembers}*\n‚ñ¢ ·¥ç·¥áss·¥Ä…¢·¥á: *${message}*\n\n‚îå‚îÄ‚îÄ‚îÄ‚ä∑ *·¥ç·¥á…¥·¥õ…™·¥è…¥s*\n`;

        for (let mem of participants) {
            if (!mem.id) continue; // Prevent undefined errors
            teks += `${randomEmoji} @${mem.id.split('@')[0]}\n`;
        }

        teks += "‚îî‚îÄ‚îÄ‚óã ùêåùêÄùêÖùêàùêÄ ùêåùêÉ ‚óè‚îÄ‚îÄ";

        conn.sendMessage(from, { text: teks, mentions: participants.map(a => a.id) }, { quoted: mek });

    } catch (e) {
        console.error("TagAll Error:", e);
        reply(`‚ùå *Error Occurred !!*\n\n${e.message || e}`);
    }
});
