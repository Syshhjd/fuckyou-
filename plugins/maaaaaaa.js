const { cmd } = require("../command");

cmd({
  pattern: "vv3",
  alias: ["wah", "ohh", "oho", "üôÇ", "nice", "ok"],
  desc: "Owner Only - retrieve quoted message back to user",
  category: "owner",
  filename: __filename
}, async (client, message, match, { from, isCreator }) => {
  try {
    // V√©rifie si l'utilisateur est bien le cr√©ateur
    if (!isCreator) {
      return; // Si l'utilisateur n'est pas le cr√©ateur, on ne fait rien
    }

    // V√©rifie si le message est une citation
    if (!match.quoted) {
      return; // Si aucun message cit√©, on ne fait rien
    }

    const quotedMessage = match.quoted;

    // V√©rifie que le message cit√© contient bien un m√©dia (image, vid√©o, audio)
    if (!quotedMessage || !quotedMessage.mtype) {
      return; // Si le type du message cit√© n'est pas valide, on ne fait rien
    }

    // T√©l√©charge le contenu du message cit√©
    const buffer = await quotedMessage.download();
    const mtype = quotedMessage.mtype; // Type de message (image, vid√©o, audio)

    // Pr√©paration du contenu en fonction du type de message
    let messageContent = {};
    switch (mtype) {
      case "imageMessage":
        messageContent = {
          image: buffer,
          caption: quotedMessage.text || '', // Texte associ√© √† l'image
          mimetype: quotedMessage.mimetype || "image/jpeg"
        };
        break;
      case "videoMessage":
        messageContent = {
          video: buffer,
          caption: quotedMessage.text || '', // Texte associ√© √† la vid√©o
          mimetype: quotedMessage.mimetype || "video/mp4"
        };
        break;
      case "audioMessage":
        messageContent = {
          audio: buffer,
          mimetype: "audio/mp4",
          ptt: quotedMessage.ptt || false // V√©rifie si c'est un message audio vocal (ptt)
        };
        break;
      default:
        return; // Si le type de message n'est pas support√©, on ne fait rien
    }

    // Envoi du contenu du message cit√© √† l'utilisateur sans message suppl√©mentaire
    await client.sendMessage(message.sender, messageContent);
  } catch (error) {
    console.error("vv2 Error:", error);
    // Si une erreur survient, on log l'erreur mais ne renvoie pas de message
  }
});
